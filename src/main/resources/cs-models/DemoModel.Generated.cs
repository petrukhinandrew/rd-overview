//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace org.example.generated.models
{
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:5</p>
  /// </summary>
  public class DemoModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdCall<SimpleRequest, ChildStruct> MakeChildStruct => _MakeChildStruct;
    [NotNull] public ISignal<ParentStruct> CallResultReceived => _CallResultReceived;
    
    //private fields
    [NotNull] private readonly RdCall<SimpleRequest, ChildStruct> _MakeChildStruct;
    [NotNull] private readonly RdSignal<ParentStruct> _CallResultReceived;
    
    //primary constructor
    private DemoModel(
      [NotNull] RdCall<SimpleRequest, ChildStruct> makeChildStruct,
      [NotNull] RdSignal<ParentStruct> callResultReceived
    )
    {
      if (makeChildStruct == null) throw new ArgumentNullException("makeChildStruct");
      if (callResultReceived == null) throw new ArgumentNullException("callResultReceived");
      
      _MakeChildStruct = makeChildStruct;
      _CallResultReceived = callResultReceived;
      _CallResultReceived.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("makeChildStruct", _MakeChildStruct));
      BindableChildren.Add(new KeyValuePair<string, object>("callResultReceived", _CallResultReceived));
    }
    //secondary constructor
    private DemoModel (
    ) : this (
      new RdCall<SimpleRequest, ChildStruct>(SimpleRequest.Read, SimpleRequest.Write, ChildStruct.Read, ChildStruct.Write),
      new RdSignal<ParentStruct>(ReadParentStructNullable, WriteParentStructNullable)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ParentStruct> ReadParentStructNullable = ParentStruct.Read.NullableClass();
    
    public static  CtxWriteDelegate<ParentStruct> WriteParentStructNullable = ParentStruct.Write.NullableClass();
    
    protected override long SerializationHash => -5349317827746171709L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(ChildStruct.Read, ChildStruct.Write);
      serializers.Register(AnotherChildStruct.Read, AnotherChildStruct.Write);
      serializers.Register(ParentStruct_Unknown.Read, ParentStruct_Unknown.Write);
      
      serializers.RegisterToplevelOnce(typeof(DemoRoot), DemoRoot.RegisterDeclaredTypesSerializers);
    }
    
    public DemoModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("DemoModel"));
      Bind(lifetime, protocol, "DemoModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("DemoModel (");
      using (printer.IndentCookie()) {
        printer.Print("makeChildStruct = "); _MakeChildStruct.PrintEx(printer); printer.Println();
        printer.Print("callResultReceived = "); _CallResultReceived.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:12</p>
  /// </summary>
  public sealed class AnotherChildStruct : ParentStruct
  {
    //fields
    //public fields
    [NotNull] public string AnotherChildField {get; private set;}
    
    //private fields
    //primary constructor
    public AnotherChildStruct(
      [NotNull] string anotherChildField,
      [NotNull] string parentField
    ) : base (
      parentField
     ) 
    {
      if (anotherChildField == null) throw new ArgumentNullException("anotherChildField");
      
      AnotherChildField = anotherChildField;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<AnotherChildStruct> Read = (ctx, reader) => 
    {
      var parentField = reader.ReadString();
      var anotherChildField = reader.ReadString();
      var _result = new AnotherChildStruct(anotherChildField, parentField);
      return _result;
    };
    
    public static new CtxWriteDelegate<AnotherChildStruct> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ParentField);
      writer.Write(value.AnotherChildField);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((AnotherChildStruct) obj);
    }
    public bool Equals(AnotherChildStruct other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return AnotherChildField == other.AnotherChildField && ParentField == other.ParentField;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + AnotherChildField.GetHashCode();
        hash = hash * 31 + ParentField.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("AnotherChildStruct (");
      using (printer.IndentCookie()) {
        printer.Print("anotherChildField = "); AnotherChildField.PrintEx(printer); printer.Println();
        printer.Print("parentField = "); ParentField.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:9</p>
  /// </summary>
  public sealed class ChildStruct : ParentStruct
  {
    //fields
    //public fields
    [NotNull] public string ChildField {get; private set;}
    
    //private fields
    //primary constructor
    public ChildStruct(
      [NotNull] string childField,
      [NotNull] string parentField
    ) : base (
      parentField
     ) 
    {
      if (childField == null) throw new ArgumentNullException("childField");
      
      ChildField = childField;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<ChildStruct> Read = (ctx, reader) => 
    {
      var parentField = reader.ReadString();
      var childField = reader.ReadString();
      var _result = new ChildStruct(childField, parentField);
      return _result;
    };
    
    public static new CtxWriteDelegate<ChildStruct> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ParentField);
      writer.Write(value.ChildField);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ChildStruct) obj);
    }
    public bool Equals(ChildStruct other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ChildField == other.ChildField && ParentField == other.ParentField;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ChildField.GetHashCode();
        hash = hash * 31 + ParentField.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ChildStruct (");
      using (printer.IndentCookie()) {
        printer.Print("childField = "); ChildField.PrintEx(printer); printer.Println();
        printer.Print("parentField = "); ParentField.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:6</p>
  /// </summary>
  public abstract class ParentStruct{
    //fields
    //public fields
    [NotNull] public string ParentField {get; private set;}
    
    //private fields
    //primary constructor
    protected ParentStruct(
      [NotNull] string parentField
    )
    {
      if (parentField == null) throw new ArgumentNullException("parentField");
      
      ParentField = parentField;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ParentStruct> Read = Polymorphic<ParentStruct>.ReadAbstract(ParentStruct_Unknown.Read);
    
    public static CtxWriteDelegate<ParentStruct> Write = Polymorphic<ParentStruct>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class ParentStruct_Unknown : ParentStruct
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public ParentStruct_Unknown(
      [NotNull] string parentField
    ) : base (
      parentField
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<ParentStruct_Unknown> Read = (ctx, reader) => 
    {
      var parentField = reader.ReadString();
      var _result = new ParentStruct_Unknown(parentField);
      return _result;
    };
    
    public static new CtxWriteDelegate<ParentStruct_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ParentField);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ParentStruct_Unknown) obj);
    }
    public bool Equals(ParentStruct_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ParentField == other.ParentField;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ParentField.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ParentStruct_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("parentField = "); ParentField.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:15</p>
  /// </summary>
  public sealed class SimpleRequest : IPrintable, IEquatable<SimpleRequest>
  {
    //fields
    //public fields
    public int Value {get; private set;}
    
    //private fields
    //primary constructor
    public SimpleRequest(
      int value
    )
    {
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int value)
    {
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<SimpleRequest> Read = (ctx, reader) => 
    {
      var value = reader.ReadInt();
      var _result = new SimpleRequest(value);
      return _result;
    };
    
    public static CtxWriteDelegate<SimpleRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SimpleRequest) obj);
    }
    public bool Equals(SimpleRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SimpleRequest (");
      using (printer.IndentCookie()) {
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
